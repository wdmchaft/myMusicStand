/** *	@file SearchAlgorithms *      @author Steven Solomon <solomon.steven.m@gmail.com> *      @date 8/24/2011 * *	@abstact  *	Various Search Algorithms for tree searches that only work  *	with UIAutomation framework. * *	@discussion *	Sortof a library of Javascript search algorithms. *	Each function will outline its features and big O. *//** * *	@abstract  *	Search that expands checks all elements on screen. * *	@discussion *  This is breadth first search for all the elements of *  the element passed in. * *	O ( |V| + |E| ) = O ( b^d ) where d is the depth of *  the solution node and b is the branching factor. *  * *	@param rootNode *	Node to start traversal from. * *	@param goalFunction *	Function used to determine if a goal node has been reached. * *	@returns *	UIAElement where the success function returns true. *	None if no such element is found.  */function contains(rootElement, successFunction){	// nodes to expand	var toExpand = new Array(rootElement);	// nodes expanded	var expanded = new Array(rootElement);		// begin expanding 	while (toExpand.length > 0)	{		// dequeue element		var v = toExpand.shift();				for (var element in v.elements())		{                // Check if this is the goal node                if (successFunction(element))                {                    return element;                }                // Check element isn't in already expanded queue                else if (expanded.indexOf(element) == -1)                 {                     toExpand.push(element);                }		}		return null;	}}